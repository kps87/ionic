{"version":3,"sources":["../../src/pages/history/history.ts","../../src/pages/settings/settings.ts","../../node_modules/@angular/core/esm5 lazy","../../src lazy","../../src/pages/home/home.ts","../../src/providers/weather/weather.ts","../../src/providers/news/news.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../src/providers/stored-data/stored-data.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { Observable } from 'rxjs/Observable';\nimport { StoredDataProvider } from '../../providers/stored-data/stored-data';\n\n@IonicPage()\n@Component({\n  selector: 'page-history',\n  templateUrl: 'history.html',\n})\nexport class HistoryPage {\n\n  // variables\n  cityData;\n  cities: string[] = [];\n  disableButton: boolean = false;\n\n  // constructor\n  constructor(public navCtrl: NavController, \n    public navParams: NavParams,\n    public storedDataProvider: StoredDataProvider\n    ) {\n  }\n\n  // delegate to other methods when page loads\n  ionViewDidLoad() {\n    this.loadHistory()\n  }\n\n  // function which loads history from persistent storage\n  loadHistory(){\n    let historyObservable = Observable.fromPromise(this.storedDataProvider.getHistory());\n    historyObservable.subscribe(data => {\n      if(data == null){\n        this.cityData = undefined;\n        this.cities = [];\n      }\n      else{\n        this.cities = data['cities']\n        this.cityData = data['cityData'];\n      }\n    });\n  }\n\n  // clear the history and disable the button\n  clearHistory(){\n    let promise = this.storedDataProvider.storage.clear();\n    promise.then(() => {\n      this.loadHistory();\n      this.disableButton = true;\n    }\n    )\n    .catch(\n      () => this.loadHistory()\n    );\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/history/history.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { StoredDataProvider } from '../../providers/stored-data/stored-data';\n\n\n@IonicPage()\n@Component({\n  selector: 'page-settings',\n  templateUrl: 'settings.html',\n})\nexport class SettingsPage {\n\n  // variables\n  units: string = \"metric\"; // initialize as undefined, but get from oldUnits variable or persistent storage\n  savedUnits: string = \"metric\"; // a tempororary variable to backup the previously saved units should the user not save their settings\n  city: string = undefined; // undefined, set to default value of Galway if user does not enter a city\n  savedCity: string = undefined; // a tempororary variable to backup the previously saved city should the user not save their settings\n  requestedSave: boolean = false; // boolean switch which controls whether to save user input or not\n\n  // constructor\n  constructor(\n    public navCtrl: NavController, \n    public navParams: NavParams,\n    public storedDataProvider: StoredDataProvider\n    ) {}\n\n  // called every time the view is navigated to\n  ionViewWillEnter(){\n\n    // set to false every time page is loaded\n    this.requestedSave = false;\n\n    // get the settings from the stored data provider (persistent memory)\n    this.storedDataProvider.getSettings().then(\n      (settings) => {\n        this.savedCity = settings['city'];\n        this.savedUnits = settings['units'];\n        this.units = settings['units'];\n        this.city = settings['city'];\n      }\n      )\n      .catch(() => {\n        this.city = this.savedCity;\n        this.units = this.savedUnits;\n      })\n      ;\n    }\n\n  // saves the settings based on user request\n  save(){\n    this.requestedSave = true;\n    this.navCtrl.pop();\n  }\n\n  // on exit -- update the city and units that are in storage\n  ionViewWillLeave(){\n\n    // if save was requested then update the city and units\n    if(this.requestedSave == true){\n\n      // sanitize any user input for the city\n      // don't allow any empty strings through -- default to savedCity if\n      // user input is blank\n      if(this.city != undefined){\n        let temp = this.city.replace(/\\s+/g, \"\");\n        if(temp.length == 0){\n          this.city = undefined;\n        }\n      }\n      \n      // only use the default city if the user does not input a city\n      // and there was no city in persistent storage\n      if(this.city == undefined && this.savedCity == undefined){\n        this.savedCity = \"Galway\";\n      }\n      // else if the user has input overwrite the saved value -- actually done at end of method\n      else if(this.city != undefined){\n        this.savedCity = this.city;\n      }\n\n      // always update the units when save is requested\n      this.savedUnits = this.units;\n\n    }\n    // else restore defaults/values loaded from settings\n    else{\n      this.city = this.savedCity;\n      this.units = this.savedUnits;\n    }\n\n    // add city and units to persistent storage\n    this.storedDataProvider.addKeyValuePair(\"settings\", {\"units\": this.savedUnits, \"city\": this.savedCity});\n  \n  }\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/settings/settings.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 114;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/esm5 lazy\n// module id = 114\n// module chunks = 2","var map = {\n\t\"../pages/history/history.module\": [\n\t\t283,\n\t\t1\n\t],\n\t\"../pages/settings/settings.module\": [\n\t\t284,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids)\n\t\treturn Promise.reject(new Error(\"Cannot find module '\" + req + \"'.\"));\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(ids[0]);\n\t});\n};\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 157;\nmodule.exports = webpackAsyncContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 157\n// module chunks = 2","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport { SettingsPage } from '../settings/settings';\nimport { HistoryPage } from '../history/history';\nimport { StoredDataProvider } from '../../providers/stored-data/stored-data';\nimport { WeatherProvider } from '../../providers/weather/weather';\nimport { NewsProvider} from '../../providers/news/news';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n\n  // weather variable used to display info in home.html\n  validCityFound: boolean = false;\n  city: string = undefined;\n  icon: string = undefined;\n  country: string = undefined;\n  weatherDescription: string;\n  weatherMain: string;\n  weatherIcon: string;\n  temperature: number;\n  feelsLike: number;\n\n  // news variables used to display info in home.html\n  totalStories: string = undefined;\n  articles: object[] = undefined;\n  showNews: boolean = false;\n  disableNewsButton: boolean = true;\n\n  // history variables -- boolean to display the \"extra functionality\" history button\n  disableHistoryButton: boolean = true;\n\n  // constructor\n  constructor(public navCtrl: NavController,\n    public storedDataProvider: StoredDataProvider,\n    public weatherProvider: WeatherProvider,\n    public newsProvider: NewsProvider\n    ) {\n    }\n\n  // push/open the settings page\n  openSettingsPage(){\n    this.navCtrl.push(SettingsPage);\n  }\n\n  // push/open the history page -- this is an added feature\n  openHistoryPage(){\n    this.navCtrl.push(HistoryPage);\n  }\n\n  // every time page is loaded delegate calls to other subroutines\n  // to load various parts of page\n  ionViewWillEnter(){\n    this.loadPage()\n  }\n\n  // main routine to get settings, then the weather, then the news\n  loadPage(){\n\n    // always disable the news button initially\n    this.showNews = false;\n    this.validCityFound = false;\n\n    // get the settings observable -- will try to retrieve units and city from persistent storage\n    let settingsObservable = Observable.fromPromise(this.storedDataProvider.getSettings());\n\n    // subscribe to the settings\n    settingsObservable.subscribe(\n      (settings) => {\n\n        // if the settings are null set everything to invalid values\n        if (settings == null){\n          this.setInValidWeatherVariables();\n          this.setInValidNewsVariables();\n          this.disableHistoryButton = true;\n        }\n\n        // else try to get the weather, only if the city is not undefined\n        else{\n\n          // if the city is defined (i.e. a string), then build\n          // an observable to subscribe to, only update weather data and subscribe\n          // to news stories if it is a valid http response\n          if(settings['city'] != undefined){\n\n            // set a units variable\n            let units = settings['units'];\n\n            // capitalize city if not defined\n            this.city = settings['city'];\n            this.city = this.city[0].toUpperCase() + this.city.substr(1).toLowerCase();\n\n            // build the weather observable before subscribing\n            this.weatherProvider.buildWeatherObservable(this.city, units);\n\n            // subscribe to weather observable\n            this.weatherProvider.weatherObservable.subscribe(\n              (weatherData) => {\n\n                // if the weatherData is a string then there has been a HTTP GET error\n                // reset all the weather and news variables\n                // and set the units to the current units\n                // and set the city to an undefined city\n                // the app will also reset the city and units stored in persistent storage\n                // to a previously valid city, and the current units\n                if(typeof(weatherData) === 'string'){\n                  this.validCityFound = false;\n                  this.setLastValidSearchResult();\n                }\n                // else update the weather variables and get the news\n                else{\n\n                  this.validCityFound = true;\n\n                  // update weather variables by piping in the dictionary object retrieved\n                  // from the weather API\n                  this.setValidWeatherVariables(weatherData)\n\n                  // get the news\n                  this.newsProvider.buildNewsObservable(this.country)\n                  this.newsProvider.newsObservable.subscribe(\n\n                    (newsData) => {\n\n                      // if the newsData is a string then there has been a HTTP GET error\n                      // and set the city to an undefined city\n                      if(typeof(newsData) === 'string'){\n                        this.totalStories = \"Error retrieving news data\";\n                        this.articles = undefined;\n                      }\n                      else{\n                        this.totalStories = newsData['totalResults'];\n                        this.articles = newsData['articles'];\n                      }\n\n                      // set variables which render news on page\n                      this.disableNewsButton = false;\n                      this.showNews = false;\n\n                      // add the weather+news data to history\n                      let newsAndWeather: object = {\"units\": units, \"weatherIcon\": this.weatherIcon, \n                      \"weatherMain\": this.weatherMain, \"temperature\": this.temperature,\n                      \"totalStories\": this.totalStories, \"articles\": this.articles};\n                      this.storedDataProvider.addWeatherAndNewsToSessionHistory(this.city, newsAndWeather);\n                      \n                      // enable the history button\n                      this.disableHistoryButton = false;\n                    }\n                    );\n                }\n              }\n            );\n          } // end if loop\n        } // end else loop\n      }\n    ); // end data subscription\n  }\n\n  // sets the city and units from the last valid search result\n  // as the city and units in persistent storage i.e. in the Settings page\n  setLastValidSearchResult(){\n\n    // set some default weather and news variables\n    this.setInValidWeatherVariables();\n    this.setInValidNewsVariables();\n\n    // get data from history\n    let historyObservable = Observable.fromPromise(this.storedDataProvider.getHistory());\n    historyObservable.subscribe(data => {\n\n      // if there is data in history, then load the last city and units\n      if(data != null){\n        let lastCity = data['cities'][0]\n        let lastCityUnits = data['cityData'][lastCity]['units'];\n        this.storedDataProvider.addKeyValuePair(\"settings\", {\"units\": lastCityUnits, \"city\": lastCity});\n      }\n      // else set defaults\n      else{\n        this.storedDataProvider.addKeyValuePair(\"settings\", {\"units\": \"metric\", \"city\": undefined});\n      }\n    });\n  }\n\n  // resets the main variables which show the weather data\n  setInValidWeatherVariables(){\n    this.city = undefined;\n    this.country = undefined;\n    this.weatherDescription = undefined;\n    this.weatherMain = undefined;\n    this.weatherIcon = undefined\n    this.temperature = undefined;\n    this.feelsLike = undefined;\n  }\n\n  // updates the main variables which show the weather data\n  setValidWeatherVariables(weatherData){\n    this.weatherMain = weatherData['weather'][0]['main'];\n    this.weatherDescription = weatherData['weather'][0]['description'];\n    this.temperature = weatherData['main']['temp'];\n    this.feelsLike = weatherData['main']['feels_like'];\n    this.country = weatherData['sys']['country'];\n    this.weatherIcon = this.weatherProvider.getIcon(weatherData['weather'][0]['icon']);\n  }\n\n  // resets the news variables \n  setInValidNewsVariables(){\n    this.disableNewsButton = true;\n    this.showNews = false;\n    this.totalStories = undefined;\n    this.articles = undefined;\n  }\n\n  // simple boolean switch\n  showArticles(){\n      this.showNews = !this.showNews;\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/home/home.ts","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { StoredDataProvider } from '../stored-data/stored-data';\nimport 'rxjs/add/observable/fromPromise';\nimport { Observable } from \"rxjs/Observable\";\n\n@Injectable()\nexport class WeatherProvider {\n\n  // storing variables\n  baseUrl: string = \"http://api.openweathermap.org/data/2.5/weather?q=\"; // base url, other data appended\n  key: string = \"8d4a6498e1c3e2acb3cf884378c0fd06\"; // api key\n  city: string; // declare the city\n  units: string; // declare the units\n  url: string; // final url which is used to get weather -- constructed from other data\n  weatherObservable: Observable<any>;\n\n  // constructor\n  constructor(public http: HttpClient,\n    public storedDataProvider: StoredDataProvider\n    ) {}\n\n\n  // creates a weather observer which can be subscribed to by other pages\n  buildWeatherObservable(city: string, units: string) {\n\n    // set the city, units and build the url for the http get request\n    this.city = city;\n    this.units = units;\n    this.buildUrl();\n\n    // create an observable that can be subscribed to later, handle any errors\n    this.weatherObservable = Observable.create(\n      (observer) => {\n          this.http.get(this.url).subscribe(\n            response => observer.next(response),\n            error => observer.next(\"Error \" + error['status'] + \" likely invalid city or units\"),\n            () => observer.complete()\n          );\n      }\n    )\n\n  }\n\n  // builds the url for the api call\n  buildUrl() {\n    this.url = this.baseUrl + this.city + \"&units=\" + this.units + \"&appid=\" + this.key; \n  }\n\n  // gets the weather icon to be displayed alongisde alphanumeric data\n  getIcon(icon: string): string {\n    if(icon != undefined){\n      let iconurl = \"http://openweathermap.org/img/w/\" + icon + \".png\";\n      return iconurl;\n    }\n    return undefined;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/weather/weather.ts","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\n/*\n  Generated class for the NewsProvider provider.\n\n  See https://angular.io/guide/dependency-injection for more info on providers\n  and Angular DI.\n*/\n@Injectable()\nexport class NewsProvider {\n\n  // variables\n  baseUrl: string = \"https://newsapi.org/v2/top-headlines?country=\";\n  key: string = \"4523324c4c624788994464681e0eeea4\";\n  url: string;\n  country: string = undefined; // default country is undefined\n  pageSize: string = \"5\"; // default pages is 5\n  newsObservable: Observable<any>; // constructed and accessible to home page when initialized\n\n  // constructor\n  constructor(public http: HttpClient) {\n  }\n\n  // method which builds a news observable from which\n  // data can be obtained\n  buildNewsObservable(country: string){\n\n    // update the country and build the url for the HTTP get request\n    this.country = country;\n    this.buildUrl();\n\n    // create an observable that can be subscribed to later\n    // handle any errors with a message\n    this.newsObservable = Observable.create(\n      (observer) => {\n          this.http.get(this.url).subscribe(\n            response => observer.next(response),\n            error => observer.next(\"Error \" + error['status'] + \" likely invalid country, page size, or api key\"),\n            () => observer.complete()\n          );\n      }\n    )\n\n  }\n\n  // build the url for the http GET request\n  buildUrl() {\n    this.url = this.baseUrl + this.country + \"&pageSize=\" + this.pageSize + \"&apiKey=\" + this.key; \n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/news/news.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { IonicStorageModule } from '@ionic/storage';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MyApp } from './app.component';\nimport { HomePage } from '../pages/home/home';\nimport { SettingsPage } from '../pages/settings/settings';\nimport { HistoryPage } from '../pages/history/history';\nimport { WeatherProvider } from '../providers/weather/weather';\nimport { StoredDataProvider } from '../providers/stored-data/stored-data';\nimport { NewsProvider } from '../providers/news/news';\n\n@NgModule({\n  declarations: [\n    MyApp,\n    HomePage,\n    SettingsPage,\n    HistoryPage\n  ],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(MyApp),\n    IonicStorageModule.forRoot(),\n    HttpClientModule\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    HomePage,\n    SettingsPage,\n    HistoryPage\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    WeatherProvider,\n    NewsProvider,\n    StoredDataProvider\n  ]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\nimport { HomePage } from '../pages/home/home';\n@Component({\n  templateUrl: 'app.html'\n})\nexport class MyApp {\n  rootPage:any = HomePage;\n\n  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) {\n    platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      statusBar.styleDefault();\n      splashScreen.hide();\n    });\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class StoredDataProvider {\n\n  // constructor\n  constructor(public storage: Storage) {\n  }\n\n  // sets a key value pair in session storage\n  addKeyValuePair(key: string, value: any): Promise<any> {\n    return this.storage.set(key, value);\n  }\n\n  // gets a key value pair from session storage\n  getSettings(): Promise<any> {\n    return this.storage.ready().then(\n      () => {return this.storage.get(\"settings\")}\n    ).catch(\n      () => {return this.storage.get(\"settings\")}\n    )\n  }\n\n  // function which returns a promise based on an attempt to get\n  // the \"history\" key from storage -- used to build the 'history' page which is an added feature\n  getHistory(): Promise<any>{\n    return this.storage.ready().then(\n      () => {return this.storage.get(\"history\")}\n    ).catch(\n      () => {return this.storage.get(\"history\")}\n    )\n  }\n\n  // adds data to a history so that 'history' page feature can be implemented\n  addWeatherAndNewsToSessionHistory(city: string, newsAndWeater){\n\n    // capitalize the city\n    let cityCapitalize = city[0].toUpperCase() + city.substr(1).toLowerCase();\n    let historyObservable = Observable.fromPromise(this.getHistory());\n\n    // this.storage.set(city.toLowerCase(), newsAndWeater);\n    historyObservable.subscribe(data => {\n\n      // if there is not data in the history, then just add this city\n      if(data == null){\n        data = {}\n        data['cityData'] = {};\n        data['cities'] = [cityCapitalize];\n        data['cityData'][cityCapitalize] = newsAndWeater;\n      }\n      // else append the city to pre-existing data -- make sure to\n      // remove a city if it pre-exists and place the new history data first in the history array\n      else{\n\n        // if city is in array remove it, then add it to the beginning of the list\n        let index = data['cities'].indexOf(cityCapitalize);\n        if(index > -1){\n          data['cities'].splice(index, 1);\n        }\n        data['cities'].unshift(cityCapitalize);\n\n        // overwrite the city data\n        data['cityData'][cityCapitalize] = newsAndWeater;\n      \n      }\n\n      // add the history to persistent storage\n      this.addKeyValuePair(\"history\", data);\n    });\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/stored-data/stored-data.ts"],"sourceRoot":""}